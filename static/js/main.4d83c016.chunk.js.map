{"version":3,"sources":["img/05.png","img/logo.png","img/04.png","img/button_download_ios.png","img/button_download_android.png","page/SubPage.js","page/SubPage2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SubPage","_ref","Object","esm_extends","react_default","a","createElement","className","alt","src","fir1","SubPage2","androidUrl","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderContent","isMobile","isIOS","href","state","bind","assertThisInitialized","logo","fir","page_SubPage","page_SubPage2","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0ECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yFCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wMCiBzBC,EAdC,SAAAC,GAAkBC,OAAAC,EAAA,EAAAD,CAAA,GAAAD,GAChC,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,wDACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,6FAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAI,GAAGC,IAAKC,SCOlCC,EAfE,SAAAV,GAAkBC,OAAAC,EAAA,EAAAD,CAAA,GAAAD,GACjC,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,gDACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,oEACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,+EAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAI,GAAGC,IAAKC,gECO3CE,EACJ,6EA2CaC,cAzCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAb,OAAAc,EAAA,EAAAd,CAAAe,KAAAJ,IACjBE,EAAAb,OAAAgB,EAAA,EAAAhB,CAAAe,KAAAf,OAAAiB,EAAA,EAAAjB,CAAAW,GAAAO,KAAAH,KAAMH,KAIRO,cAAgB,WACd,OAAIC,WACEC,QACKnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWiB,KAAK,qBAE7BpB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWiB,KAAMZ,IAGhCR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWiB,KAAK,4BAXtCT,EAAKU,MAAQ,GACbV,EAAKM,cAAgBN,EAAKM,cAAcK,KAAnBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAa,KAHJA,wEAiBjB,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAKmB,IAAMrB,UAAU,WAAWC,IAAI,UAE3CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,oEAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaE,IAAKoB,IAAKrB,IAAI,OAE5CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZU,KAAKI,gBACNjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,qCAGJH,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAD,cApCUC,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4d83c016.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/05.8032aba1.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.98a7e930.png\";","module.exports = __webpack_public_path__ + \"static/media/04.6742f5c0.png\";","module.exports = __webpack_public_path__ + \"static/media/button_download_ios.e02bc30d.png\";","module.exports = __webpack_public_path__ + \"static/media/button_download_android.77efec49.png\";","import React from \"react\";\r\nimport \"../App.css\";\r\nimport fir1 from \"../img/05.png\";\r\nconst SubPage = ({ ...props }) => {\r\n  return (\r\n    <div className=\"mainpage1\">\r\n      <div className=\"main_container2\">\r\n        <h4 className=\"mainh4\">몇일 남았지? 내 약속</h4>\r\n        <h5 className=\"mainh5\">약속이 몇일 남았느지 한눈에 관리</h5>\r\n      </div>\r\n      <div className=\"imagecontainer2\">\r\n        <img className=\"main_image1\" alt=\"\" src={fir1} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubPage;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport fir1 from \"../img/05.png\";\r\nconst SubPage2 = ({ ...props }) => {\r\n  return (\r\n    <div className=\"mainpage1\">\r\n      <div className=\"main_container2\">\r\n        <h4 className=\"mainh4\">출발이 반입니다.</h4>\r\n        <h5 className=\"mainh5\">“어디야? 아직 집이야?”</h5>\r\n        <h5 className=\"mainh5\">친구들의 위치를 확인하세요</h5>\r\n      </div>\r\n      <div className=\"imagecontainer2\">\r\n        <img className=\"main_image1\" alt=\"\" src={fir1} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubPage2;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n//import MainPage from \"./page/MainPage.js\";\r\nimport SubPage from \"./page/SubPage.js\";\r\nimport SubPage2 from \"./page/SubPage2.js\";\r\n//import appicon from \"./512_512.png\";\r\nimport logo from \"./img/logo.png\";\r\nimport iosButtonImg from \"./img/button_download_ios.png\";\r\nimport androidButtonImg from \"./img/button_download_android.png\";\r\nimport fir from \"./img/04.png\";\r\nimport fir1 from \"./img/05.png\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport {\r\n  BrowserView,\r\n  MobileView,\r\n  isMobile,\r\n  isIOS,\r\n  isAndroid\r\n} from \"react-device-detect\";\r\nconst androidUrl =\r\n  \"https://play.google.com/store/apps/details?id=com.simsimhan.promissu&hl=ko\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.renderContent = this.renderContent.bind(this);\r\n  }\r\n  renderContent = () => {\r\n    if (isMobile) {\r\n      if (isIOS) {\r\n        return <a className=\"downhref\" href=\"http://naver.com\" />;\r\n      } else {\r\n        return <a className=\"downhref\" href={androidUrl} />;\r\n      }\r\n    } else {\r\n      return <a className=\"downhref\" href=\"http://localhost:3000/\" />;\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"mainpage\">\r\n          <div className=\"logocontainer\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          </div>\r\n          <div className=\"main_container\">\r\n            <h3 className=\"mainh3\">지금, 약속을 약속하세요</h3>\r\n          </div>\r\n          <div className=\"imagecontainer\">\r\n            <img className=\"main_image\" src={fir} alt=\" \" />\r\n          </div>\r\n          <div className=\"buttoncontain\">\r\n            {this.renderContent()}\r\n            <button className=\"downbutton\">앱 다운로드</button>\r\n          </div>\r\n        </div>\r\n        <SubPage />\r\n        <SubPage2 />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./App.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}